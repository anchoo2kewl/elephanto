---
- name: Deploy ElephantTO Events to Oracle Linux 9 ARM
  hosts: elephanto_servers
  gather_facts: yes
  vars:
    app_name: elephanto-events
    app_dir: /opt/{{ app_name }}
    nginx_conf_dir: /etc/nginx/conf.d
    domain: "{{ domain_name }}"
    admin_email: "{{ email }}"

  tasks:
    - name: Update system packages
      dnf:
        name: "*"
        state: latest
        update_cache: yes
      become: yes

    - name: Install required packages
      dnf:
        name:
          - git
          - nginx
          - firewalld
          - python3-pip
          - curl
          - wget
          - unzip
        state: present
      become: yes

    - name: Install Docker
      block:
        - name: Add Docker repository
          get_url:
            url: https://download.docker.com/linux/centos/docker-ce.repo
            dest: /etc/yum.repos.d/docker-ce.repo
            mode: '0644'

        - name: Install Docker CE
          dnf:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: present

        - name: Start and enable Docker
          systemd:
            name: docker
            state: started
            enabled: yes

        - name: Add opc user to docker group
          user:
            name: opc
            groups: docker
            append: yes
      become: yes

    - name: Install Docker Compose (standalone)
      get_url:
        url: "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-linux-aarch64"
        dest: /usr/local/bin/docker-compose
        mode: '0755'
      become: yes

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: opc
        group: opc
        mode: '0755'
      become: yes

    - name: Copy application files
      synchronize:
        src: "../"
        dest: "{{ app_dir }}/"
        delete: yes
        rsync_opts:
          - "--exclude=ansible"
          - "--exclude=node_modules"
          - "--exclude=.git"
          - "--exclude=.env"
      delegate_to: localhost

    - name: Set ownership of application files
      file:
        path: "{{ app_dir }}"
        owner: opc
        group: opc
        recurse: yes
      become: yes

    - name: Create environment file
      copy:
        content: |
          # Database Configuration
          DATABASE_URL=postgres://elephanto:elephanto_password@postgres:5432/elephanto_events
          
          # Email Configuration
          EMAIL_SERVICE=smtp
          SMTP_HOST=mailpit
          SMTP_PORT=1025
          
          # Application Configuration
          FRONTEND_URL=https://{{ domain }}
          JWT_SECRET={{ ansible_date_time.epoch }}{{ ansible_hostname }}
          AUTO_MIGRATE=true
          
          # Server Configuration
          PORT=8080
          
          # Frontend Configuration - CRITICAL FOR PRODUCTION
          VITE_API_URL=https://{{ domain }}
        dest: "{{ app_dir }}/.env"
        owner: opc
        group: opc
        mode: '0600'
      become: yes

    - name: Reset SSH connection to pickup docker group membership
      meta: reset_connection

    - name: Build and start Docker containers
      shell: |
        cd {{ app_dir }}
        /usr/local/bin/docker-compose down || true
        /usr/local/bin/docker-compose build --no-cache
        /usr/local/bin/docker-compose up -d

    - name: Wait for application to be ready
      wait_for:
        port: 8080
        host: localhost
        delay: 15
        timeout: 180

    - name: Install Certbot
      dnf:
        name:
          - python3-certbot
          - python3-certbot-nginx
        state: present
      become: yes

    - name: Stop nginx temporarily for initial setup
      systemd:
        name: nginx
        state: stopped
      become: yes

    - name: Create initial nginx configuration
      copy:
        content: |
          server {
              listen 80;
              server_name {{ domain }};
              
              # Temporary configuration for certbot
              location /.well-known/acme-challenge/ {
                  root /var/www/html;
                  allow all;
              }
              
              location / {
                  return 301 https://$server_name$request_uri;
              }
          }
        dest: "{{ nginx_conf_dir }}/{{ app_name }}-temp.conf"
        backup: yes
      become: yes

    - name: Create web root directory
      file:
        path: /var/www/html
        state: directory
        mode: '0755'
      become: yes

    - name: Start nginx for certificate generation
      systemd:
        name: nginx
        state: started
        enabled: yes
      become: yes

    - name: Generate SSL certificate with Certbot
      shell: |
        certbot certonly --nginx \
          --non-interactive \
          --agree-tos \
          --email {{ admin_email }} \
          -d {{ domain }}
      register: certbot_result
      failed_when: false
      become: yes

    - name: Create final nginx configuration
      copy:
        content: |
          upstream backend {
              server localhost:8080;
          }

          upstream frontend {
              server localhost:3000;
          }

          server {
              listen 80;
              server_name {{ domain }};
              return 301 https://$server_name$request_uri;
          }

          server {
              listen 443 ssl http2;
              server_name {{ domain }};

              # SSL Configuration
              ssl_certificate /etc/letsencrypt/live/{{ domain }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/{{ domain }}/privkey.pem;
              include /etc/letsencrypt/options-ssl-nginx.conf;
              ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

              # Security headers
              add_header X-Frame-Options DENY;
              add_header X-Content-Type-Options nosniff;
              add_header X-XSS-Protection "1; mode=block";
              add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";

              # API routes to backend
              location /api/ {
                  proxy_pass http://backend;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
                  proxy_connect_timeout 60s;
                  proxy_send_timeout 60s;
                  proxy_read_timeout 60s;
              }

              # Frontend routes
              location / {
                  proxy_pass http://frontend;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
                  
                  # Fallback for React Router
                  try_files $uri $uri/ @fallback;
              }

              location @fallback {
                  proxy_pass http://frontend;
                  proxy_http_version 1.1;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              # Optional: Mailpit access (remove in production)
              location /mailpit/ {
                  proxy_pass http://localhost:8025/;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
          }
        dest: "{{ nginx_conf_dir }}/{{ app_name }}.conf"
        backup: yes
      become: yes

    - name: Remove temporary nginx configuration
      file:
        path: "{{ nginx_conf_dir }}/{{ app_name }}-temp.conf"
        state: absent
      become: yes

    - name: Test nginx configuration
      shell: nginx -t
      register: nginx_test
      become: yes

    - name: Reload nginx with new configuration
      systemd:
        name: nginx
        state: reloaded
      when: nginx_test.rc == 0
      become: yes

    - name: Configure firewall
      firewalld:
        service: "{{ item }}"
        permanent: yes
        state: enabled
        immediate: yes
      loop:
        - http
        - https
        - ssh
      become: yes

    - name: Set up SSL certificate auto-renewal
      cron:
        name: "renew letsencrypt certificates"
        minute: "0"
        hour: "2"
        job: "certbot renew --quiet --nginx && systemctl reload nginx"
      become: yes

    - name: Create systemd service for docker-compose
      copy:
        content: |
          [Unit]
          Description=ElephantTO Events Docker Compose
          Requires=docker.service
          After=docker.service

          [Service]
          Type=oneshot
          RemainAfterExit=yes
          WorkingDirectory={{ app_dir }}
          ExecStart=/usr/local/bin/docker-compose up -d
          ExecStop=/usr/local/bin/docker-compose down
          TimeoutStartSec=0
          User=opc
          Group=opc

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/elephanto-events.service
      become: yes

    - name: Enable and start elephanto-events service
      systemd:
        name: elephanto-events
        enabled: yes
        state: started
        daemon_reload: yes
      become: yes

    - name: Verify application is running
      uri:
        url: "https://{{ domain }}/api/health"
        method: GET
        status_code: 200
        validate_certs: no
      register: health_check
      retries: 5
      delay: 10

    - name: Display deployment status
      debug:
        msg: |
          🎉 ElephantTO Events has been successfully deployed!
          
          🌐 Website: https://{{ domain }}
          📧 Mailpit: https://{{ domain }}/mailpit/
          🔧 Application directory: {{ app_dir }}
          
          📝 Next steps:
          1. Test the website: https://{{ domain }}
          2. Check application logs: docker-compose logs -f
          3. Monitor services: systemctl status elephanto-events
          
          🔐 SSL Certificate: {{ 'Installed' if certbot_result.rc == 0 else 'Manual setup required' }}